test_that("No additional NA values were introduced in calendar$price", {
expect_equal(na_count_before, na_count_after)
})
library(testthat)
# Unit Test:
test_that("No additional NA values were introduced in calendar$price", {
expect_equal(na_count_before, na_count_after)
})
# Chunk 1: setup
knitr::opts_chunk$set(
echo = TRUE,
warning = FALSE,
message = FALSE,
cache = FALSE
)
# Chunk 2
# Locale Setting
Sys.setlocale("LC_TIME", "en_EU.UTF-8")  # Set time-related locale to English
# (European format)
# Visualization & Reporting
library(ggplot2)      # Data visualization
library(knitr)        # Document integration
library(kableExtra)   # Table formatting
library(pander)       # R to Pandoc conversion
library(shiny)        # Web apps
library(ggmap)        # Maps
library(plotly)       # Interactive plots
library(gridExtra)    # Arrange plots
library(huxtable)     # Styled tables
library(DT)           # Interactive tables
library(viridis)      # Colorblind-friendly color palettes
# Data Manipulation & Exploration
library(dplyr)        # Data manipulation
library(DataExplorer) # EDA
library(lubridate)    # Date-time functions
library(tidyverse)    # Data science tools
library(psych)        # Psychometrics
library(readxl)       # Excel data import
# Spatial Data & Analysis
library(sf)           # Spatial data
library(osmdata)      # OpenStreetMap
library(spatstat)     # Spatial statistics
library(sp)           # Spatial data classes
# Analysis & Modeling
library(jtools)       # Research tools
library(broom.mixed)  # Tidy mixed models
library(vcd)          # Categorical data
library(summarytools) # Summary tools
# Chunk 3
# path (define your own path to the files)
base_path <- "C:/Users/gerbe/OneDrive/Desktop/MSc Data Science/4) R Bootcamp/rbootcamp/Groupwork/"
# listings (3 datasets)
listings_dec <- read.csv(file.path(base_path, "listings_december.csv.gz"))
listings_dec$period <- 1
listings_mar <- read.csv(file.path(base_path, "listings_march.csv.gz"))
listings_mar$period <- 2
listings_jun <- read.csv(file.path(base_path, "listings_june.csv.gz"))
listings_jun$period <- 3
# check
dim(listings_dec)
dim(listings_mar)
dim(listings_jun)
# join
listings <- rbind(listings_dec, listings_mar, listings_jun)
head(listings)
nrow(listings)
# calendar (3 datasets)
cal_dec <- read.csv(file.path(base_path, "calendar_december.csv.gz"))
cal_mar <- read.csv(file.path(base_path, "calendar_march.csv.gz"))
cal_jun <- read.csv(file.path(base_path, "calendar_june.csv.gz"))
# join
calendar <- rbind(cal_dec, cal_mar, cal_jun)
# ensure that the column "date" is interpreted as a date
class(calendar$date)
calendar$date <- as.Date(calendar$date)
# Filter 'calendar' from 2023-01-01 till 2023-08-01, because of missing values starting in august
calendar <- calendar %>%
filter(
date < as.Date("2023-08-01", format = "%Y-%m-%d") &
date >= as.Date("2023-01-01", format = "%Y-%m-%d")
)
# check dates (min/max) evtl unittest
range_dates <- range(calendar$date, na.rm = T)
# 'na.rm = TRUE'  ignore missing values
print(paste("The dates ranges from", range_dates[1], "to", range_dates[2]))
# import holidays dataset
holidays_raw <- read.csv(file.path(base_path, "schulferien.csv"), sep = ",", header = TRUE, stringsAsFactors = FALSE)
# transform from chr to date
holidays_raw <- holidays_raw %>%
mutate(
start_date = as.Date(start_date, format = "%Y-%m-%d %H:%M:%S"),
end_date = as.Date(end_date, format = "%Y-%m-%d %H:%M:%S")
)
# create new data.frame
holidays <- data.frame(date = seq(as.Date("2023-01-01"), as.Date("2023-07-31"), by = "1 day"))
# check if a date from holidays falls within a interval in holidays_raw
holidays$is_holiday <- sapply(holidays$date, function(d) {
any(holidays_raw$start_date <= d & holidays_raw$end_date >= d)
})
# convert boolean values to numeric 0 (no holiday) 1 holiday
holidays$is_holiday <- as.integer(holidays$is_holiday)
# Chunk 4: left_join
# Joining is_holiday to the calendar dataframe based on the date
calendar <- calendar %>%
left_join(holidays, by = "date")
# date
calendar$date <- as.Date(calendar$date)
# Before transformation:
na_count_before <- sum(is.na(calendar$price))
na_count_before
na_count_after
# Chunk 1: setup
knitr::opts_chunk$set(
echo = TRUE,
warning = FALSE,
message = FALSE,
cache = FALSE
)
# Chunk 2
# Locale Setting
Sys.setlocale("LC_TIME", "en_EU.UTF-8")  # Set time-related locale to English
# (European format)
# Visualization & Reporting
library(ggplot2)      # Data visualization
library(knitr)        # Document integration
library(kableExtra)   # Table formatting
library(pander)       # R to Pandoc conversion
library(shiny)        # Web apps
library(ggmap)        # Maps
library(plotly)       # Interactive plots
library(gridExtra)    # Arrange plots
library(huxtable)     # Styled tables
library(DT)           # Interactive tables
library(viridis)      # Colorblind-friendly color palettes
# Data Manipulation & Exploration
library(dplyr)        # Data manipulation
library(DataExplorer) # EDA
library(lubridate)    # Date-time functions
library(tidyverse)    # Data science tools
library(psych)        # Psychometrics
library(readxl)       # Excel data import
# Spatial Data & Analysis
library(sf)           # Spatial data
library(osmdata)      # OpenStreetMap
library(spatstat)     # Spatial statistics
library(sp)           # Spatial data classes
# Analysis & Modeling
library(jtools)       # Research tools
library(broom.mixed)  # Tidy mixed models
library(vcd)          # Categorical data
library(summarytools) # Summary tools
# Chunk 3
# path (define your own path to the files)
base_path <- "C:/Users/gerbe/OneDrive/Desktop/MSc Data Science/4) R Bootcamp/rbootcamp/Groupwork/"
# listings (3 datasets)
listings_dec <- read.csv(file.path(base_path, "listings_december.csv.gz"))
listings_dec$period <- 1
listings_mar <- read.csv(file.path(base_path, "listings_march.csv.gz"))
listings_mar$period <- 2
listings_jun <- read.csv(file.path(base_path, "listings_june.csv.gz"))
listings_jun$period <- 3
# check
dim(listings_dec)
dim(listings_mar)
dim(listings_jun)
# join
listings <- rbind(listings_dec, listings_mar, listings_jun)
head(listings)
nrow(listings)
# calendar (3 datasets)
cal_dec <- read.csv(file.path(base_path, "calendar_december.csv.gz"))
cal_mar <- read.csv(file.path(base_path, "calendar_march.csv.gz"))
cal_jun <- read.csv(file.path(base_path, "calendar_june.csv.gz"))
# join
calendar <- rbind(cal_dec, cal_mar, cal_jun)
# ensure that the column "date" is interpreted as a date
class(calendar$date)
calendar$date <- as.Date(calendar$date)
# Filter 'calendar' from 2023-01-01 till 2023-08-01, because of missing values starting in august
calendar <- calendar %>%
filter(
date < as.Date("2023-08-01", format = "%Y-%m-%d") &
date >= as.Date("2023-01-01", format = "%Y-%m-%d")
)
# check dates (min/max) evtl unittest
range_dates <- range(calendar$date, na.rm = T)
# 'na.rm = TRUE'  ignore missing values
print(paste("The dates ranges from", range_dates[1], "to", range_dates[2]))
# import holidays dataset
holidays_raw <- read.csv(file.path(base_path, "schulferien.csv"), sep = ",", header = TRUE, stringsAsFactors = FALSE)
# transform from chr to date
holidays_raw <- holidays_raw %>%
mutate(
start_date = as.Date(start_date, format = "%Y-%m-%d %H:%M:%S"),
end_date = as.Date(end_date, format = "%Y-%m-%d %H:%M:%S")
)
# create new data.frame
holidays <- data.frame(date = seq(as.Date("2023-01-01"), as.Date("2023-07-31"), by = "1 day"))
# check if a date from holidays falls within a interval in holidays_raw
holidays$is_holiday <- sapply(holidays$date, function(d) {
any(holidays_raw$start_date <= d & holidays_raw$end_date >= d)
})
# convert boolean values to numeric 0 (no holiday) 1 holiday
holidays$is_holiday <- as.integer(holidays$is_holiday)
# Chunk 4: left_join
# Joining is_holiday to the calendar dataframe based on the date
calendar <- calendar %>%
left_join(holidays, by = "date")
View(calendar)
datatable(calendar)
# date
calendar$date <- as.Date(calendar$date)
# Before transformation:
na_and_empty_count_before <- sum(is.na(calendar$price) | calendar$price == "")
# Your transformation code:
calendar$date <- as.Date(calendar$date)
# Your transformation code:
calendar$price <- gsub("\\$", "", calendar$price)
calendar$price <- gsub(",", "", calendar$price)
calendar$price <- as.numeric(calendar$price)
# After transformation:
na_count_after <- sum(is.na(calendar$price))
# Unit Test:
test_that("Only empty strings were converted to NA in calendar$price", {
expect_equal(na_and_empty_count_before, na_count_after)
})
na_and_empty_count_before
na_count_after
test_that()
?test_that()
# Unit Test that compares transformation "same length":
test_that("Only empty strings were converted to NA in calendar$price", {
expect_equal(na_and_empty_count_before, na_count_after)
})
# Chunk 1: setup
knitr::opts_chunk$set(
echo = TRUE,
warning = FALSE,
message = FALSE,
cache = TRUE
)
# Chunk 2
# Locale Setting
Sys.setlocale("LC_TIME", "en_EU.UTF-8")  # Set time-related locale to English
# (European format)
# Visualization & Reporting
library(ggplot2)      # Data visualization
library(knitr)        # Document integration
library(kableExtra)   # Table formatting
library(pander)       # R to Pandoc conversion
library(shiny)        # Web apps
library(ggmap)        # Maps
library(plotly)       # Interactive plots
library(gridExtra)    # Arrange plots
library(huxtable)     # Styled tables
library(DT)           # Interactive tables
library(viridis)      # Colorblind-friendly color palettes
# Data Manipulation & Exploration
library(dplyr)        # Data manipulation
library(DataExplorer) # EDA
library(lubridate)    # Date-time functions
library(tidyverse)    # Data science tools
library(psych)        # Psychometrics
library(readxl)       # Excel data import
library(testthat)     # Unit test
# Spatial Data & Analysis
library(sf)           # Spatial data
library(osmdata)      # OpenStreetMap
library(spatstat)     # Spatial statistics
library(sp)           # Spatial data classes
# Analysis & Modeling
library(jtools)       # Research tools
library(broom.mixed)  # Tidy mixed models
library(vcd)          # Categorical data
library(summarytools) # Summary tools
# Chunk 3
# path (define your own path to the files)
base_path <- "C:/Users/gerbe/OneDrive/Desktop/MSc Data Science/4) R Bootcamp/rbootcamp/Groupwork/"
# listings (3 datasets)
listings_dec <- read.csv(file.path(base_path, "listings_december.csv.gz"))
listings_dec$period <- 1
listings_mar <- read.csv(file.path(base_path, "listings_march.csv.gz"))
listings_mar$period <- 2
listings_jun <- read.csv(file.path(base_path, "listings_june.csv.gz"))
listings_jun$period <- 3
# check
dim(listings_dec)
dim(listings_mar)
dim(listings_jun)
# join
listings <- rbind(listings_dec, listings_mar, listings_jun)
head(listings)
nrow(listings)
# calendar (3 datasets)
cal_dec <- read.csv(file.path(base_path, "calendar_december.csv.gz"))
cal_mar <- read.csv(file.path(base_path, "calendar_march.csv.gz"))
cal_jun <- read.csv(file.path(base_path, "calendar_june.csv.gz"))
# join
calendar <- rbind(cal_dec, cal_mar, cal_jun)
# ensure that the column "date" is interpreted as a date
class(calendar$date)
calendar$date <- as.Date(calendar$date)
# Filter 'calendar' from 2023-01-01 till 2023-08-01, because of missing values starting in august
calendar <- calendar %>%
filter(
date < as.Date("2023-08-01", format = "%Y-%m-%d") &
date >= as.Date("2023-01-01", format = "%Y-%m-%d")
)
# check dates (min/max) evtl unittest
range_dates <- range(calendar$date, na.rm = T)
# 'na.rm = T'  ignore missing values
print(paste("The dates ranges from", range_dates[1], "to", range_dates[2]))
# import holidays dataset
holidays_raw <- read.csv(file.path(base_path, "schulferien.csv"), sep = ",", header = TRUE, stringsAsFactors = FALSE)
# transform from chr to date
holidays_raw <- holidays_raw %>%
mutate(
start_date = as.Date(start_date, format = "%Y-%m-%d %H:%M:%S"),
end_date = as.Date(end_date, format = "%Y-%m-%d %H:%M:%S")
)
# create new data.frame
holidays <- data.frame(date = seq(as.Date("2023-01-01"), as.Date("2023-07-31"), by = "1 day"))
# check if a date from holidays falls within a interval in holidays_raw
holidays$is_holiday <- sapply(holidays$date, function(d) {
any(holidays_raw$start_date <= d & holidays_raw$end_date >= d)
})
# convert boolean values to numeric 0 (no holiday) 1 holiday
holidays$is_holiday <- as.integer(holidays$is_holiday)
# Chunk 4: left_join
# Joining is_holiday to the calendar data frame based on the date
calendar <- calendar %>%
left_join(holidays, by = "date")
# Chunk 5
# date
calendar$date <- as.Date(calendar$date)
# Price
# Before transformation
na_and_empty_count_before <- sum(is.na(calendar$price) | calendar$price == "")
# transformation price: taking "$" and "," away for numeric
calendar$price <- gsub("\\$", "", calendar$price)
calendar$price <- gsub(",", "", calendar$price)
calendar$price <- as.numeric(calendar$price)
# After transformation
na_count_after <- sum(is.na(calendar$price))
# Unit Test that compares transformation "same length":
test_that("Only empty strings were converted to NA in calendar$price", {
expect_equal(na_and_empty_count_before, na_count_after)
})
DataExplorer::plot_bar(calendar_short, title = "Calendar", xaxis_rotate = 45)
rmarkdown::clean_cache()
rmarkdown::clean_cache()
runApp('C:/Users/gerbe/OneDrive/Desktop/MSc Data Science/4) R Bootcamp/rbootcamp/Groupwork/Shiny_app_2/app_ameneties_geoplot.R')
runApp('C:/Users/gerbe/OneDrive/Desktop/MSc Data Science/4) R Bootcamp/rbootcamp/Groupwork/Shiny_app_2/app_ameneties_geoplot.R')
runApp('C:/Users/gerbe/OneDrive/Desktop/MSc Data Science/4) R Bootcamp/rbootcamp/Groupwork/Shiny_app_2/app_ameneties_geoplot.R')
Sys.setlocale("LC_TIME", "en_EU.UTF-8")
library(ggplot2)
library(knitr)
library(kableExtra)
library(dplyr)
library(sf)
library(DataExplorer)
library(pander)
library(lubridate)
library(viridis)
library(shiny)
library(tidyverse)
library(osmdata)
library(ggmap)
library(spatstat)
library(sp)
library(plotly)
library(gridExtra)
library(readxl)
library(psych)
library(jtools)
library(huxtable)
library(broom.mixed)
library(vcd)
library(summarytools)
# listings (3 datasets)
listings_dec <- read.csv("listings_december.csv.gz")
listings_dec$period <- 1
listings_mar <-
read.csv("listings_march.csv.gz")
getwd()
setwd("C:/Users/gerbe/OneDrive/Desktop/MSc Data Science/4) R Bootcamp/rbootcamp/Groupwork/Shiny_app_2")
# listings (3 datasets)
listings_dec <- read.csv("listings_december.csv.gz")
listings_dec$period <- 1
listings_mar <-
read.csv("listings_march.csv.gz")
listings_mar$period <- 2
listings_jun <-
read.csv("listings_june.csv.gz")
listings_jun$period <- 3
listings <- rbind(listings_dec, listings_mar, listings_jun)
head(listings)
nrow(listings)
# price taking $ , away for numeric
listings$price <- gsub("\\$", "", listings$price)
listings$price <- gsub(",", "", listings$price)
listings$price <- as.numeric(listings$price)
# changeing to date format
listings$host_since <- as.Date(listings$host_since)
listings$host_since <- as.Date(listings$host_since)
# acceptance taking % away
listings$host_acceptance_rate <-
gsub("\\%", "", listings$host_acceptance_rate)
listings$host_response_rate <-
gsub("\\%", "", listings$host_response_rate)
# add swiss franc
listings$price_swiss_franc <- listings$price * 0.88
#checking in amenities
listings <- listings %>%
mutate(showergel_or_shampoo = grepl("([S-s]hower\\s*[-]*[G-g]el)|([S-s]hampoo)", amenities, ignore.case = T)) %>%
mutate(wifi = grepl("[W-w]ifi", amenities, ignore.case = T)) %>%
mutate(freeparking = grepl("[F-f]ree\\s*[-]*[P-p]arking", amenities, ignore.case = T)) %>%
mutate(pool = grepl("([P-p]ool)|([J-j]acuzzi)", amenities, ignore.case = T)) %>%
mutate(dishwasher = grepl("[D-d]ish\\s*washer", amenities, ignore.case = T)) %>%
mutate(washer = grepl("[W-w]asher", amenities, ignore.case = T)) %>%
mutate(selfcheckin = grepl("[S-s]elf\\s*check[-]*\\s*in", amenities, ignore.case = T)) %>%
mutate(petsallowed = grepl("[P-p]ets\\s*allowed", amenities, ignore.case = T)) %>%
mutate(refrigerator = grepl("[R-r]efrigerator", amenities, ignore.case = T)) %>%
mutate(airconditioner = grepl("[A-a]ir\\s*conditioner", amenities, ignore.case = T)) %>%
ungroup()
new_listings_bplot <- new_listings %>%
select(c("price", "showergel_or_shampoo", "wifi", "pool", "freeparking","dishwasher","washer","selfcheckin","petsallowed","refrigerator","airconditioner"))
listings_bplot <- listings %>%
select(c("price", "showergel_or_shampoo", "wifi", "pool", "freeparking","dishwasher","washer","selfcheckin","petsallowed","refrigerator","airconditioner"))
listings_bplot <- listings_bplot %>%
pivot_longer(cols= -price, names_to = "Category", values_to = "Value")
listings_bplot <- listings_bplot %>%
filter(Value == T)
listings_bplot <- listings_bplot %>%
pivot_longer(cols= -price, names_to = "Category", values_to = "Value")
#checking in amenities
listings <- listings %>%
mutate(showergel_or_shampoo = grepl("([S-s]hower\\s*[-]*[G-g]el)|([S-s]hampoo)", amenities, ignore.case = T)) %>%
mutate(wifi = grepl("[W-w]ifi", amenities, ignore.case = T)) %>%
mutate(freeparking = grepl("[F-f]ree\\s*[-]*[P-p]arking", amenities, ignore.case = T)) %>%
mutate(pool = grepl("([P-p]ool)|([J-j]acuzzi)", amenities, ignore.case = T)) %>%
mutate(dishwasher = grepl("[D-d]ish\\s*washer", amenities, ignore.case = T)) %>%
mutate(washer = grepl("[W-w]asher", amenities, ignore.case = T)) %>%
mutate(selfcheckin = grepl("[S-s]elf\\s*check[-]*\\s*in", amenities, ignore.case = T)) %>%
mutate(petsallowed = grepl("[P-p]ets\\s*allowed", amenities, ignore.case = T)) %>%
mutate(refrigerator = grepl("[R-r]efrigerator", amenities, ignore.case = T)) %>%
mutate(airconditioner = grepl("[A-a]ir\\s*conditioner", amenities, ignore.case = T)) %>%
ungroup()
listings_bplot <- listings %>%
select(c("price", "showergel_or_shampoo", "wifi", "pool", "freeparking","dishwasher","washer","selfcheckin","petsallowed","refrigerator","airconditioner"))
listings_bplot <- listings_bplot %>%
pivot_longer(cols= -price, names_to = "Category", values_to = "Value")
listings_bplot <- listings_bplot %>%
filter(Value == T)
listings_bplot
runApp('app_ameneties_geoplot.R')
runApp('app_ameneties_geoplot.R')
runApp('app_ameneties_geoplot.R')
runApp('C:/Users/gerbe/OneDrive/Desktop/MSc Data Science/4) R Bootcamp/rbootcamp/Groupwork/Shiny_app')
runApp('app_ameneties_geoplot.R')
View(listings)
library(shiny)
library(tidyverse)
library(viridis)
library(gridExtra)
# listings (3 datasets)
listings_dec <- read.csv("listings_december.csv.gz")
listings_dec$period <- 1
listings_mar <-
read.csv("listings_march.csv.gz")
listings_mar$period <- 2
listings_jun <-
read.csv("listings_june.csv.gz")
listings_jun$period <- 3
# join
listings <- rbind(listings_dec, listings_mar, listings_jun)
head(listings)
nrow(listings)
# price taking $ , away for numeric
listings$price <- gsub("\\$", "", listings$price)
listings$price <- gsub(",", "", listings$price)
listings$price <- as.numeric(listings$price)
# changeing to date format
listings$host_since <- as.Date(listings$host_since)
listings$host_since <- as.Date(listings$host_since)
# acceptance taking % away
listings$host_acceptance_rate <-
gsub("\\%", "", listings$host_acceptance_rate)
listings$host_response_rate <-
gsub("\\%", "", listings$host_response_rate)
# add swiss franc
class(listings$price)
listings$price_swiss_franc <- listings$price * 0.88
# add amenities groups
listings <- listings %>%
mutate(showergel_or_shampoo = grepl("([S-s]hower\\s*[-]*[G-g]el)|([S-s]hampoo)", amenities, ignore.case = T)) %>%
mutate(wifi = grepl("[W-w]ifi", amenities, ignore.case = T)) %>%
mutate(freeparking = grepl("[F-f]ree\\s*[-]*[P-p]arking", amenities, ignore.case = T)) %>%
mutate(pool = grepl("([P-p]ool)|([J-j]acuzzi)", amenities, ignore.case = T)) %>%
mutate(dishwasher = grepl("[D-d]ish\\s*washer", amenities, ignore.case = T)) %>%
mutate(washer = grepl("[W-w]asher", amenities, ignore.case = T)) %>%
mutate(selfcheckin = grepl("[S-s]elf\\s*check[-]*\\s*in", amenities, ignore.case = T)) %>%
mutate(petsallowed = grepl("[P-p]ets\\s*allowed", amenities, ignore.case = T)) %>%
mutate(refrigerator = grepl("[R-r]efrigerator", amenities, ignore.case = T)) %>%
mutate(airconditioner = grepl("[A-a]ir\\s*conditioner", amenities, ignore.case = T)) %>%
ungroup()
View(listings)
runApp('C:/Users/gerbe/OneDrive/Desktop/MSc Data Science/4) R Bootcamp/rbootcamp/Groupwork/Shiny_app')
runApp('C:/Users/gerbe/OneDrive/Desktop/MSc Data Science/4) R Bootcamp/rbootcamp/Groupwork/Shiny_app')
runApp('C:/Users/gerbe/OneDrive/Desktop/MSc Data Science/4) R Bootcamp/rbootcamp/Groupwork/Shiny_app')
runApp('C:/Users/gerbe/OneDrive/Desktop/MSc Data Science/4) R Bootcamp/rbootcamp/Groupwork/Shiny_app')
runApp('C:/Users/gerbe/OneDrive/Desktop/MSc Data Science/4) R Bootcamp/rbootcamp/Groupwork/Shiny_app')
